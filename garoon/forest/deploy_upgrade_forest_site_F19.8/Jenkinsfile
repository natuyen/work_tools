#! /bin/groovy

// variable
NODE_LINUX = "tcb-garoon-test-base"
WORK_DIR_NODE_LINUX = ""
NODE_DEVMGR_1 = "devmgr"
WORK_DIR_NODE_DEVMGR_1 = ""

def GAROON_CURRENT_VERSION
def GAROON_CURRENT_BRANCH = "${GAROON_CURRENT_BRANCH}"
def GAROON_CURRENT_BUILD_NUMBER = "${GAROON_CURRENT_BUILD_NUMBER}"
def DESTROY_SERVICE_SET = Boolean.valueOf("${DESTROY_SERVICE_SET}");

def GAROON_NEW_BRANCH = "${GAROON_NEW_BRANCH}"
def GAROON_NEW_BUILD_NUMBER = "${GAROON_NEW_BUILD_NUMBER}"
def GAROON_NEW_VERSION

def ARCHIVE_FOLDER = "LEO_${env.BUILD_ID}"
// contains archive forest version
def ARCHIVE_FOLDER_VERSION

currentBuild.description =  "<li>SERVICE_SET: ${SERVICE_SET}"
currentBuild.description += "<li>TARGET: ${GAROON_NEW_BRANCH}"

echo "SERVICE_SET: ${SERVICE_SET}"
echo "GAROON_CURRENT_BRANCH: ${GAROON_CURRENT_BRANCH}"
echo "GAROON_CURRENT_BUILD_NUMBER: ${GAROON_CURRENT_BUILD_NUMBER}"
echo "DESTROY_SERVICE_SET: ${DESTROY_SERVICE_SET}"

echo "GAROON_NEW_BRANCH: ${GAROON_NEW_BRANCH}"
echo "GAROON_NEW_BUILD_NUMBER: ${GAROON_NEW_BUILD_NUMBER}"

echo "ARCHIVE_FOLDER: ${ARCHIVE_FOLDER}"\

// specify upgrade archive/ version
def IS_UPGRADE_ARCHIVE
if (GAROON_NEW_BRANCH != ''){
    IS_UPGRADE_ARCHIVE = true
}

def download_archive(branch, buildNumber, pattern){
    node(NODE_LINUX) {
        dir(WORK_DIR_NODE_LINUX){
            // find on garoon folder
            sh "mkdir -p garoon"
            def mount_ret = sh(returnStdout: true, script: '''#!/bin/bash
                                if ! mountpoint -q "garoon"; then
                                    mount -r -t cifs //file.dev.cybozu.co.jp/Share/ARCHIVE/RC/garoon garoon/ -o guest
                                fi
                            '''.stripIndent())

            def archiveFilePath
            if (buildNumber == ''){
                archiveFilePath = sh(returnStdout: true, script: "find garoon/${branch}*/ -type f -name '${pattern}' | sort -r | head -1").trim()
            }
            else {
                archiveFilePath = sh(returnStdout: true, script: "find garoon/${branch}*/*_${buildNumber}/ -type f -name '${pattern}' | sort -r | head -1").trim()
            }
            

            // find on garoon4
            if(archiveFilePath == ""){
                sh "mkdir -p garoon4"
                def mount_ret2 = sh(returnStdout: true, script: '''#!/bin/bash
                                if ! mountpoint -q "garoon4"; then
                                    mount -r -t cifs //file.dev.cybozu.co.jp/Share/ARCHIVE/RC/garoon4 garoon4/ -o guest
                                fi
                            '''.stripIndent())

                if (buildNumber == ''){
                    archiveFilePath = sh(returnStdout: true, script: "find garoon4/${branch}*/ -type f -name '${pattern}' | sort -r | head -1").trim()
                }
                else {
                    archiveFilePath = sh(returnStdout: true, script: "find garoon4/${branch}*/*_${buildNumber}/ -type f -name '${pattern}' | sort -r | head -1").trim()
                }                
                echo "archiveFilePath: ${archiveFilePath}"
                sh "cp -rf ${archiveFilePath} ."
                sh "umount garoon4"
            }
            else // on garoon
            {
                echo "archiveFilePath: ${archiveFilePath}"
                sh "cp -rf ${archiveFilePath} ."
                sh "umount garoon"    
            }
            
            
            INSTALL_ARCHIVE_NAME = sh(returnStdout: true, script: "echo ${archiveFilePath} | awk -F '/' '{print \$NF}'").trim()
            echo "INSTALL_ARCHIVE_NAME: ${INSTALL_ARCHIVE_NAME}"
            stash name: "garoon archive", includes: INSTALL_ARCHIVE_NAME

            return INSTALL_ARCHIVE_NAME
        }
    }// node
}

def replace_archive(){
    sh "rm -rf garoon-GRF*.tgz"
    unstash name: "garoon archive"
    sh "ls -ltr ."
}

def getForestVersion(archive_name){
    return archive_name.substring(archive_name.indexOf("GRF")+3, archive_name.indexOf("_"))
}

// main process
try {
    timestamps {
        timeout(time: 90, unit: "MINUTES") {
            stage("Prepare") {
                // node download archive
                node(NODE_LINUX) {
                    WORK_DIR_NODE_LINUX = "${env.WORKSPACE}/${ARCHIVE_FOLDER}"
                }// node

                // node upgrade archive
                node(NODE_DEVMGR_1) {
                    WORK_DIR_NODE_DEVMGR_1 = "${env.WORKSPACE}/${ARCHIVE_FOLDER}"
                }// node
            }

            stage('Destroy and Deploy Forest site') {
                node(NODE_DEVMGR_1) {
                    dir(WORK_DIR_NODE_DEVMGR_1){
                        if(DESTROY_SERVICE_SET){
                            withEnv(["PYTHONPATH=/usr/local/lumber/lib"]) {
                                echo "Destroying Service Set..."
                                sh "/usr/local/lumber/sbin/lumber-destroy --no-update-status ${SERVICE_SET}"
                                echo "Destroy done"
                            }
                        }

                        if( GAROON_CURRENT_BRANCH != ''){
                            echo "Deploying Forest site..."
                            echo "Downloading archive..."
                            def archive_name = download_archive(GAROON_CURRENT_BRANCH, GAROON_CURRENT_BUILD_NUMBER, 'garoon-GRF*.tgz')
                            GAROON_CURRENT_VERSION = getForestVersion(archive_name)
                            echo "archive_name:${archive_name}"
                            echo "GAROON_CURRENT_VERSION:${GAROON_CURRENT_VERSION}"
                            sh "cp -prf /home/qa/${GAROON_CURRENT_VERSION} ."
                            ARCHIVE_FOLDER_VERSION = "${WORK_DIR_NODE_DEVMGR_1}/${GAROON_CURRENT_VERSION}"
                            dir(ARCHIVE_FOLDER_VERSION){
                                replace_archive()
                            }

                            sh "update-garoon-static ${ARCHIVE_FOLDER_VERSION}/garoon*"

                            withEnv(["PYTHONPATH=/usr/local/lumber/lib"]) {
                                sh "domaindb ss version ${SERVICE_SET} ${GAROON_CURRENT_VERSION}"
                                sh "/usr/local/lumber/sbin/lumber-deploy  --no-wait-nginxc-update-all --no-update-status ${SERVICE_SET} ${ARCHIVE_FOLDER_VERSION}"
                            }
                            echo "Deploy done."
                        }
                    }
                }
                
            }

            stage("Update archive / Upgrade version") {
                if(!IS_UPGRADE_ARCHIVE){
                    return;
                }
                node(NODE_DEVMGR_1) {
                    dir(WORK_DIR_NODE_DEVMGR_1){
                        echo "Downloading archive..."
                        def archive_name = download_archive(GAROON_NEW_BRANCH, GAROON_NEW_BUILD_NUMBER, 'garoon-GRF*.tgz')
                        GAROON_NEW_VERSION = getForestVersion(archive_name)
                        echo "archive_name:${archive_name}"
                        echo "GAROON_NEW_VERSION:${GAROON_NEW_VERSION}"
                        sh "cp -prf /home/qa/${GAROON_NEW_VERSION} ."
                        ARCHIVE_FOLDER_VERSION = "${WORK_DIR_NODE_DEVMGR_1}/${GAROON_NEW_VERSION}"
                        dir(ARCHIVE_FOLDER_VERSION){
                            replace_archive()
                        }

                        // update archive of upgrade new archive
                        echo "Upgrade to new archive for Forest site ${GAROON_NEW_VERSION}"
                        sh "update-garoon-static ${ARCHIVE_FOLDER_VERSION}/garoon*"
                        sh "update-garuda-static ${ARCHIVE_FOLDER_VERSION}/cbmwcloud*"
                        sh "update-varaha-static ${ARCHIVE_FOLDER_VERSION}/cbofcloud*"
                        sh "update-app-static Kintone ${ARCHIVE_FOLDER_VERSION}/kintone-static*"
                        sh "cydecc ss update --force-maintenance -a Garoon ${SERVICE_SET} ${ARCHIVE_FOLDER_VERSION}"
                        sh "domaindb ss version ${SERVICE_SET} ${GAROON_NEW_VERSION}"
                        echo "Update archive / upgrade version done."
                        sh "landsat cat -t garoon.upgrade_log -u ${SERVICE_SET}-ap -d today"
                    }
                }// node
            }// stage
        }// timeout
    }// timestamps
} catch (error) {
    throw error
} finally {
    // cleanup
    timeout(time: 30, unit: "MINUTES") {
        stage("cleanup") {
            def builders = [:]

            [NODE_LINUX, NODE_DEVMGR_1].each {
                builders[it] = {
                    node(it) {
                        sh "rm -rf ${env.WORKSPACE}/${ARCHIVE_FOLDER}*"
                    }
                }
            }
            // parallel builders
        }// stage
    }
}