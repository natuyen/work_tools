#! /bin/groovy

def NODE_LINUX = "tcb-garoon-test-base"
def WORK_DIR_NODE_LINUX
def NODE_DEVMGR_1 = "devmgr-1"
def WORK_DIR_NODE_DEVMGR_1

def GIT_BRANCH = "${GIT_BRANCH}"
def GAROON_BUILD_NUMBER = "${GAROON_BUILD_NUMBER}"
def GAROON_VERSION_UP = "${GAROON_VERSION_UP}"
def ARCHIVE_FOLDER = "${GIT_BRANCH}_${env.BUILD_ID}"

currentBuild.description =  "<li>SERVICE_SET: ${SERVICE_SET}"
currentBuild.description += "<li>TARGET: ${GIT_BRANCH}"

echo "SERVICE_SET: ${SERVICE_SET}"
echo "GIT_BRANCH: ${GIT_BRANCH}"
echo "GAROON_BUILD_NUMBER: ${GAROON_BUILD_NUMBER}"
echo "GAROON_VERSION_UP: ${GAROON_VERSION_UP}"
echo "ARCHIVE_FOLDER: ${ARCHIVE_FOLDER}"

try {
    timestamps {
        timeout(time: 90, unit: "MINUTES") {
            stage("before process") {
            
                // node download archive
                node(NODE_LINUX) {
                    WORK_DIR_NODE_LINUX = "${env.WORKSPACE}/${ARCHIVE_FOLDER}"
                }// node

                // node upgrade archive
                node(NODE_DEVMGR_1) {
                    WORK_DIR_NODE_DEVMGR_1 = "${env.WORKSPACE}/${ARCHIVE_FOLDER}"
                }// node

                // download archive
                node(NODE_LINUX) {
                    dir(WORK_DIR_NODE_LINUX){
                        sh "mkdir -p garoon"
                        def mount_ret = sh(returnStdout: true, script: "mount -r -t cifs //file.dev.cybozu.co.jp/Share/ARCHIVE/RC/garoon4 garoon/ -o guest")
                        echo "mount_ret: ${mount_ret}"
                        if (mount_ret != ''){
                            sh "umount garoon"
                        }
                        def archiveFilePath
                        if (GAROON_BUILD_NUMBER == ''){
                            archiveFilePath = sh(returnStdout: true, script: "find garoon/${GIT_BRANCH}/ -type f -name 'garoon-GRF*.tgz' | sort -r | head -1").trim()
                        }
                        else {
                            archiveFilePath = sh(returnStdout: true, script: "find garoon/${GIT_BRANCH}/*_${GAROON_BUILD_NUMBER}/ -type f -name 'garoon-GRF*.tgz' | sort -r | head -1").trim()
                        }
                        echo "ARCHIVE: ${archiveFilePath}"
                        sh "cp ${archiveFilePath} ."
                        sh "umount garoon"
                        
                        INSTALL_ARCHIVE_NAME = sh(returnStdout: true, script: "echo ${archiveFilePath} | awk -F '/' '{print \$NF}'").trim()
                        echo "INSTALL_ARCHIVE_NAME: ${INSTALL_ARCHIVE_NAME}"
                        stash name: "garoon archive", includes: INSTALL_ARCHIVE_NAME
                    }
                }// node

                node(NODE_DEVMGR_1) {
                    dir(WORK_DIR_NODE_DEVMGR_1){
                        def GAROON_VERSION = sh(
                            script: "domaindb ss dump ${SERVICE_SET} | jq -r '.version'",
                            returnStdout: true
                        ).trim()
                        echo "CURRENT_GAROON_VERSION: ${GAROON_VERSION}"

                        //sh "cp -r /home/qa/${GAROON_VERSION}/* ."
                        sh "cp -r /home/qa/${GAROON_VERSION_UP}/* ."
                        sh "rm -rf garoon-GRF*.tgz"
                        unstash name: "garoon archive"
                        sh "ls -ltr ."

                        sh "echo 'Upgrade to new version ${GAROON_VERSION_UP} for Forest site'"
                        sh "update-garoon-static ${WORK_DIR_NODE_DEVMGR_1}/garoon*"
                        sh "cydecc ss update --force-maintenance -a Garoon ${SERVICE_SET} ${WORK_DIR_NODE_DEVMGR_1}"
                        sh "domaindb ss version ${SERVICE_SET} ${GAROON_VERSION_UP}"
                    }
                }// node
            }// stage
        }// timeout
    }// timestamps
} catch (error) {
    throw error
} finally {
    // cleanup
    timeout(time: 30, unit: "MINUTES") {
        stage("cleanup") {
            node(NODE_LINUX) {
                sh "rm -rf ${WORK_DIR_NODE_LINUX}"
            }

            node(NODE_DEVMGR_1) {
                sh "rm -rf ${WORK_DIR_NODE_DEVMGR_1}"

            }// node

            // def builders = [:]

            // [NODE_LINUX, NODE_DEVMGR_1].each {
            //     builders[it] = {
            //         node(it) {
            //             sh "rm -rf ${env.WORKSPACE}/${ARCHIVE_FOLDER}"
            //         }
            //     }
            // }
            // parallel builders
        }// stage
    }
}