#! /bin/groovy

// variable
NODE_LINUX = "tcb-garoon-test-base"
WORK_DIR_NODE_LINUX = ""
NODE_DEVMGR = "devmgr-3"
WORK_DIR_NODE_DEVMGR = ""

NODE_TEST_FOREST_MIGRATION = "grn-test-forest-migration"
WORK_DIR_NODE_TEST_FOREST_MIGRATION_ENABLE = "/home/GTM-6188/hazama/converter/migration"
WORK_DIR_NODE_TEST_FOREST_MIGRATION_UPLOADER = "/home/GTM-6188/uploader-test"

PARTTERN_FOREST_ARCHIVE="garoon-GRF*.tgz"
PARTTERN_GAROON_SP_ARCHIVE=""
PARTTERN_MIGRATION_ARCHIVE=""

def SERVICE_SET = "${SERVICE_SET}"
def FOREST_URL = "${FOREST_URL}"
def FOREST_BRANCH = "${FOREST_BRANCH}"
def RECREATE_SERVICE_SET = Boolean.valueOf("${RECREATE_SERVICE_SET}");

echo "SERVICE_SET: ${SERVICE_SET}"
echo "FOREST_URL: ${FOREST_URL}"
echo "FOREST_BRANCH: ${FOREST_BRANCH}"

currentBuild.description =  "<li>SERVICE_SET: ${SERVICE_SET}"
currentBuild.description += "<li>FOREST_BRANCH: ${FOREST_BRANCH}"

FOREST_VERSION = ""
def ARCHIVE_FOLDER = "${env.BUILD_ID}"
def ARCHIVE_FOLDER_VERSION // contains archive forest version
echo "ARCHIVE_FOLDER: ${ARCHIVE_FOLDER}"

def download_archive(product, branch, pattern){
    node(NODE_LINUX) {
        dir(WORK_DIR_NODE_LINUX){
            echo "Downloading archive..."
            def MOUNT_FOLDER = 'rc'
            sh "mkdir -p ${MOUNT_FOLDER}"
            def mount_ret = sh(returnStdout: true, script: '''#!/bin/bash
                                if ! mountpoint -q "garoon"; then
                                    mount -r -t cifs //file.dev.cybozu.co.jp/Share/ARCHIVE/RC rc/ -o guest
                                fi
                            '''.stripIndent())

            def archiveFilePath
            archiveFilePath = sh(returnStdout: true, script: "find rc/${product}/${branch}/ -type f -name '${pattern}' | sort -r | head -1").trim()
            
            echo "archiveFilePath: ${archiveFilePath}"
            sh "cp -rf ${archiveFilePath} ."
            sh "umount ${MOUNT_FOLDER}"
            
            INSTALL_ARCHIVE_NAME = sh(returnStdout: true, script: "echo ${archiveFilePath} | awk -F '/' '{print \$NF}'").trim()
            echo "INSTALL_ARCHIVE_NAME: ${INSTALL_ARCHIVE_NAME}"
            stash name: "garoon archive", includes: INSTALL_ARCHIVE_NAME
            echo "Download done."

            return INSTALL_ARCHIVE_NAME
        }
    }// node
}

def replace_archive(){
    sh "rm -rf garoon-GRF*.tgz"
    unstash name: "garoon archive"
    sh "ls -ltr ."
}

def getForestVersion(archive_name){
    return archive_name.substring(archive_name.indexOf("GRF")+3, archive_name.indexOf("_"))
}

def sendFailureNotification() {
    build job: "post-jenkins-status-to-kintone", wait: false
}

// main process
try {
    timestamps {
        timeout(time: 120, unit: "MINUTES") {
            stage("Prepare") {
                // node download archive
                node(NODE_LINUX) {
                    WORK_DIR_NODE_LINUX = "${env.WORKSPACE}/${ARCHIVE_FOLDER}"
                }// node

                // node upgrade archive
                node(NODE_DEVMGR) {
                    WORK_DIR_NODE_DEVMGR = "${env.WORKSPACE}/${ARCHIVE_FOLDER}"
                }// node
            }

            stage('Destroy/Deploy Forest site') {
                node(NODE_DEVMGR) {
                    dir(WORK_DIR_NODE_DEVMGR){
                        echo "Recreate Forest site..."
                        def archive_name = download_archive('garoon4', FOREST_BRANCH, PARTTERN_FOREST_ARCHIVE)
                        echo "archive_name:${archive_name}"

                        FOREST_VERSION = getForestVersion(archive_name)
                        echo "FOREST_VERSION:${FOREST_VERSION}"

                        if(RECREATE_SERVICE_SET){
                            sh "cp -prf /home/qa/${FOREST_VERSION} ."
                            ARCHIVE_FOLDER_VERSION = "${WORK_DIR_NODE_DEVMGR}/${FOREST_VERSION}"
                            dir(ARCHIVE_FOLDER_VERSION){
                                replace_archive()
                            }
                            withEnv(["PYTHONPATH=/usr/local/lumber/lib"]) {
                                sh "/usr/local/lumber/sbin/lumber-destroy --no-update-status ${SERVICE_SET}"
                                sh "domaindb ss version ${SERVICE_SET} ${FOREST_VERSION}"
                                sh "/usr/local/lumber/sbin/lumber-deploy  --no-wait-nginxc-update-all --no-update-status ${SERVICE_SET} ${ARCHIVE_FOLDER_VERSION}"
                            }
                            echo "Recreate Forest site done."
                        }
                    }
                }
                
            }

            stage("Setup Forest site for Uploader") {
                node(NODE_TEST_FOREST_MIGRATION){
                    dir(WORK_DIR_NODE_TEST_FOREST_MIGRATION_ENABLE){
                        sh "docker-compose run --rm wdio ${FOREST_URL}"
                    }
                }//node
            }// stage

            stage("Test uploader") {
                node(NODE_TEST_FOREST_MIGRATION){
                    dir(WORK_DIR_NODE_TEST_FOREST_MIGRATION_UPLOADER){
                        echo "FOREST_VERSION:${FOREST_VERSION}"
                        sh "ls -ltr converter/data/garoon/${FOREST_VERSION}"
                        sh(returnStdout: true, script:"""#!/bin/bash -x
                            # remove old garoon
                            if [ -e /var/www/cgi-bin/cbgrn/uninstall_cbgrn ]; then
                              sh /var/www/cgi-bin/cbgrn/uninstall_cbgrn complete
                            fi
                            if [ -e /usr/local/cybozu/mysql-5.0/uninstall_cyde_5_0 ]; then
                              sh /usr/local/cybozu/mysql-5.0/uninstall_cyde_5_0 complete
                            fi
                            rm -rf /var/www/cgi-bin/cbgrn
                            rm -rf /var/www/html/cbgrn
                            rm -rf /usr/local/cybozu
                            rm -f /etc/init.d/cyde_5_0
                            rm -f /etc/init.d/cyss_cbgrn

                            # migrate
                            cd converter
                            rm -rf log/*
                            rm -rf data/garoon/${FOREST_VERSION}/scripts
                            export TERM=linux
                            bash migrate-test.sh -app garoon -version ${FOREST_VERSION} -dom ${SERVICE_SET} -dev
                        """)
                        
                        echo "**************************************************************************"
                        echo "*****************************MIGRATE LOGS*****************************************"
                        sh "cat converter/log/garoon_*.log"

                        // check result
                        def result = sh(returnStdout: true, script: "grep 'Processing complete.' converter/log/garoon_*.log | cat")
                        echo "Migration result:${result}"
                        if ( result == ""){
                            currentBuild.result = "FAILURE"
                            sh "exit 1"
                        }
                    }
                }//node
            }// stage
        }// timeout
    }// timestamps
} catch (error) {
    sendFailureNotification()
    throw error
} finally {
    // cleanup
    timeout(time: 30, unit: "MINUTES") {
        stage("cleanup") {
            def builders = [:]

            [NODE_LINUX, NODE_DEVMGR].each {
                builders[it] = {
                    node(it) {
                        sh "rm -rf ${env.WORKSPACE}/${ARCHIVE_FOLDER}*"
                    }
                }
            }
            parallel builders
        }// stage
    }
}

