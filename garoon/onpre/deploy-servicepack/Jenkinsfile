#! /bin/groovy

// nodes
def NODE_DOCKER_LINUX = "grbuild14"
def WORK_DIR_NODE_DOCKER_LINUX

def NODE_SINGLE_MACHINE = "${NODE_SINGLE}"
def NODE_CLOUDPARTNER_MACHINE = "${NODE_CLOUDPARTNER}"
def NODE_LARGESCALE1_MACHINE = "${NODE_LARGESCALE1_MACHINE}"

def WORK_DIR_DEPLOY = "auto-deploy/garoon/onpre/deploy-servicepack"
def WORK_DIR_DEPLOY_TOOLS = "$WORK_DIR_DEPLOY/tools"

// Environment
def WORKER_TOOL_REPOSITORY_URL = "git@github.dev.cybozu.co.jp:tuyen-nguyen/work_tools.git"
def GAROON_REPOSITORY_URL = "git@github.dev.cybozu.co.jp:garoon/garoon.git"
def GAROON_JENKIN_CREDENTIAL_ID = "jenkins-github-deploy-key"

// Input Parameters
def GIT_BRANCH = "${BRANCH}"
def TOOL_BRANCH = "${TOOL_BRANCH}"
def INSTALL_SERVICE_PACK = Boolean.valueOf("${INSTALL_SERVICE_PACK}")
echo "INSTALL_SERVICE_PACK:${INSTALL_SERVICE_PACK}"

// process
try {
    timeout(time: 120, unit: 'MINUTES') {
        stage("Checkout") {
            node(NODE_DOCKER_LINUX) {
                dir("${env.WORKSPACE}") {
                    sh "rm -rf auto-deploy"
                }

                // Specify working directory
                // Because parallel execution fails if we don't do it at each time
                //WORK_DIR_NODE_DOCKER_LINUX = "${env.WORKSPACE}/${env.BUILD_ID}"
                WORK_DIR_NODE_DOCKER_LINUX = "${env.WORKSPACE}"
                dir(WORK_DIR_NODE_DOCKER_LINUX) {
                    // checkout deploy tool
                    checkout([
                            $class                           : "GitSCM",
                            branches                         : [[name: "origin/${TOOL_BRANCH}"]],
                            doGenerateSubmoduleConfigurations: false,
                            //clearWorkspace                   : true,
                            extensions                       : [
                                    //[$class: "GitLFSPull"],
                                    [$class: "CleanBeforeCheckout"],
                                    [$class: 'RelativeTargetDirectory', relativeTargetDir: 'auto-deploy'],
                            ],
                            submoduleCfg                     : [],
                            userRemoteConfigs                : [
                                    [
                                        credentialsId: GAROON_JENKIN_CREDENTIAL_ID,
                                        url: WORKER_TOOL_REPOSITORY_URL
                                    ]
                            ]
                        ])

                    // check out Garoon branch
                    echo "GIT_BRANCH: ${GIT_BRANCH}"
                    checkout([
                        $class                           : "GitSCM",
                        branches                         : [[name: "origin/${GIT_BRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        clearWorkspace                   : true,
                        extensions                       : [
                                [$class: "GitLFSPull"],
                                [$class: "CleanBeforeCheckout"],
                                [$class: 'RelativeTargetDirectory', relativeTargetDir: 'garoon'],
                        ],
                        submoduleCfg                     : [],
                        userRemoteConfigs                : [
                                [
                                    credentialsId: GAROON_JENKIN_CREDENTIAL_ID,
                                    url: GAROON_REPOSITORY_URL
                                ]
                        ]
                    ])

                    
                    //GIT_BRANCH_REVISION = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
                    //echo "GIT_BRANCH_REVISION: " + GIT_BRANCH_REVISION

                    //GIT_BUILD_REVISION = sh(returnStdout: true, script: "git log --oneline -n 1 ./build/binary | cut -c 1-7 | xargs git rev-parse").trim()
                    //echo "GIT_BUILD_REVISION: " + GIT_BUILD_REVISION
                }

                dir(WORK_DIR_NODE_DOCKER_LINUX) {
                    if (fileExists('garoon/build/build.conf')) {
                        sh "cp -rf garoon/build/build.conf $WORK_DIR_DEPLOY_TOOLS"
                    }
                    if (fileExists('garoon/build_sp/build_sp.conf')) {
                        sh "cp -rf garoon/build_sp/build_sp.conf $WORK_DIR_DEPLOY_TOOLS"
                        sh "echo SP_BRANCH=$GIT_BRANCH >> $WORK_DIR_DEPLOY_TOOLS/build_sp.conf"
                    }
                    sh "ls -l auto-deploy/garoon/onpre"
                    stash name: "auto-deploy", includes: "$WORK_DIR_DEPLOY_TOOLS/"
                }

            }

            currentBuild.description = "<li>target: ${GIT_BRANCH}"
        }
        
        stage("Deploy") {
            def deploySingle = {
                node(NODE_SINGLE_MACHINE) {
                    WORK_DIR_NODE_MACHINE="${env.WORKSPACE}"
                    dir(WORK_DIR_NODE_MACHINE) {
                        sh "rm -rf *"
                        unstash name: "auto-deploy"
                    }
                    
                    dir("$WORK_DIR_DEPLOY_TOOLS") {
                        sh '''
                            export INSTALL_SERVICE_PACK=$INSTALL_SERVICE_PACK
                            bash -ex single/install.sh
                            /etc/init.d/cyde_5_0 restart
                        ''' 
                    }
                    
                    
                }
            }
            
            def deployLargescale1Machine = {
                node(NODE_LARGESCALE1_MACHINE) {
                    WORK_DIR_NODE_MACHINE="${env.WORKSPACE}"
                    dir(WORK_DIR_NODE_MACHINE) {
                        sh "rm -rf *"
                        unstash name: "auto-deploy"
                    }
                    
                    dir("$WORK_DIR_DEPLOY_TOOLS") {
                        sh '''
                            export INSTALL_SERVICE_PACK=$INSTALL_SERVICE_PACK
                            bash -ex largescale/install.sh
                            /etc/init.d/cyde_5_0 restart
                        '''
                    }
                    
                    
                }
            }
            
            def deployCloudPartner = {
                node(NODE_CLOUDPARTNER_MACHINE) {
                    WORK_DIR_NODE_MACHINE="${env.WORKSPACE}"
                    dir(WORK_DIR_NODE_MACHINE) {
                        sh "rm -rf *"
                        unstash name: "auto-deploy"
                    }
                    
                    dir("$WORK_DIR_DEPLOY_TOOLS") {
                        sh '''
                            export INSTALL_SERVICE_PACK=$INSTALL_SERVICE_PACK
                            bash -ex cloudpartner/install.sh
                            /etc/init.d/cyde_5_0_cbgrn_1 restart
                        '''
                    }
                }
            }
            
            parallel(
                "Deploy Single": deploySingle,
                "Deploy Largescale 1 Machine": deployLargescale1Machine,
                "Deploy Cloud Partner": deployCloudPartner,
            )
        }
    }
} catch (err) {
    throw err
} finally {

}